# Database Architecture

## Overview

Family Checklist использует **Isar** (NoSQL embedded database) для хранения данных локально с последующей синхронизацией через **CloudKit**.

Архитектура построена на принципе **local-first**: все данные хранятся локально, приложение работает offline, синхронизация происходит автоматически при наличии iCloud.

---

## Схема базы данных

### 1. Checklists (Чеклисты)

Шаблоны недельных чеклистов с задачами и участниками.

**Поля:**
- `checklistId` — Int (PK, autoIncrement)
- `name` — String (название чеклиста: "Школьная неделя", "Каникулы")
- `isRepeating` — Bool (повторяется ли каждую неделю)
- `isArchived` — Bool (архивирован ли)
- `createdAt` — DateTime
- `modifiedAt` — DateTime
- `cloudKitRecordId` — String? (для синхронизации CloudKit)

**Примечание:** Checklists — это шаблоны, которые не привязаны к конкретной неделе. Недели определяются через TaskCompletions.

---

### 2. Users (Пользователи / Члены семьи)

Участники чеклистов (дети, родители, няни).

**Поля:**
- `userId` — Int (PK, autoIncrement)
- `name` — String (имя)
- `avatarBytes` — List<byte>? (фото в байтах)
- `colorHex` — String (цвет для UI, например "#FF5733")
- `relation` — String? (daughter, son, parent, nanny)
- `contactId` — String? (ссылка на Contacts Framework)
- `sortOrder` — Int (порядок отображения в UI)
- `createdAt` — DateTime
- `modifiedAt` — DateTime
- `cloudKitRecordId` — String?

**Индексы:** `userId`

**Связь с Contacts:** Если пользователь выбрал человека из Contacts при создании, сохраняется `contactId` для синхронизации имени/фото.

---

### 3. Tasks (Задачи/привычки)

Библиотека задач и привычек.

**Поля:**
- `taskId` — Int (PK, autoIncrement)
- `title` — String (название задачи: "Почистить зубы", "Выгулять собаку")
- `iconName` — String (идентификатор иконки: "toothbrush", "dog", "book")
- `category` — String? (hygiene, chores, learning, pets, health)
- `isCustom` — Bool (создана пользователем или из предустановленной библиотеки)
- `createdAt` — DateTime
- `modifiedAt` — DateTime
- `cloudKitRecordId` — String?

**Индексы:** `taskId`, `category`

**Библиотека иконок:** Приложение содержит предустановленный набор иконок для популярных задач. Пользователь может создавать свои задачи (`isCustom = true`).

---

### 4. UserTasks (Назначения задач)

Связывает Users + Tasks + Checklists с настройками периодичности.

**Поля:**
- `userId` — Int (FK to Users, часть composite PK)
- `taskId` — Int (FK to Tasks, часть composite PK)
- `checklistId` — String (FK to Checklists)
- `frequency` — String (дни недели: "1,2,3,4,5" = Пн-Пт, "6,7" = выходные)
- `sortOrder` — Int (порядок отображения задач в UI)
- `isEnabled` — Bool (активна ли задача в чеклисте)
- `createdAt` — DateTime
- `modifiedAt` — DateTime
- `cloudKitRecordId` — String?

**Composite Primary Key:** `(userId, taskId)`

**Индексы:** `userId`, `taskId`, `checklistId`

**Frequency формат:**
- Строка с номерами дней через запятую
- `1` = Понедельник, `2` = Вторник, ..., `7` = Воскресенье
- Примеры:
  - `"1,2,3,4,5"` — будние дни (Пн-Пт)
  - `"6,7"` — выходные (Сб-Вс)
  - `"1,3,5"` — Пн/Ср/Пт
  - `"1,2,3,4,5,6,7"` — каждый день

**Пример:** Анна должна чистить зубы каждый день в чеклисте "Школьная неделя":
```dart
UserTasks(
  userId: "uuid-anna",
  taskId: "uuid-brush-teeth",
  checklistId: "uuid-school-week",
  frequency: "1,2,3,4,5,6,7", // каждый день
  sortOrder: 1,
  isEnabled: true,
)
```

---

### 5. TaskCompletions (Отметки выполнения)

История выполнения задач по дням и неделям.

**Поля:**
- `userId` — Int (FK to Users, часть composite PK)
- `taskId` — Int (FK to Tasks, часть composite PK)
- `weekNumber` — Int (номер недели в году: 1-53, часть composite PK)
- `weekYear` — Int (год: 2025, 2026, часть composite PK)
- `dayOfWeek` — Int (день недели: 1=Пн, 7=Вс по ISO 8601, часть composite PK)
- `checklistId` — String (FK to Checklists, для фильтрации)
- `completionDate` — DateTime (полная дата выполнения)
- `isCompleted` — Bool (выполнено или нет)
- `completedAt` — DateTime? (точное время отметки)
- `completedBy` — String? (deviceId или userId кто отметил)
- `source` — Enum (manual, ocr, sync) — как была сделана отметка
- `modifiedAt` — DateTime
- `cloudKitRecordId` — String?

**Composite Primary Key:** `(userId, taskId, weekNumber, weekYear, dayOfWeek)`

**Индексы:** `userId`, `taskId`, `(weekNumber, weekYear)` composite, `checklistId`

**Важно о dayOfWeek:** Поле всегда хранится по стандарту **ISO 8601** (1=Понедельник, 7=Воскресенье), независимо от настройки пользователя `week_start_day`. Настройка влияет только на отображение в UI, но не на хранение данных.

**Формат weekNumber:**
- ISO Week Number: порядковый номер недели в году (1-53)
- Вычисляется по стандарту ISO 8601
- Первая неделя года — неделя с первым четвергом

**Source enum:**
- `manual` — отметка вручную в приложении
- `ocr` — распознана с фото (OCR)
- `sync` — синхронизирована с другого устройства

**Пример:** Анна почистила зубы в понедельник 42-й недели 2025 года:
```dart
TaskCompletions(
  userId: "uuid-anna",
  taskId: "uuid-brush-teeth",
  weekNumber: 42,
  weekYear: 2025,
  dayOfWeek: 1, // Понедельник (ISO 8601)
  checklistId: "uuid-school-week",
  completionDate: DateTime(2025, 10, 20),
  isCompleted: true,
  completedAt: DateTime(2025, 10, 20, 8, 15),
  source: TaskCompletionSource.manual,
)
```

**Вычисление weekNumber в Dart:**
```dart
int getWeekNumber(DateTime date) {
  // ISO 8601: неделя начинается с понедельника
  // Первая неделя года содержит первый четверг
  final firstDayOfYear = DateTime(date.year, 1, 1);
  final daysOffset = firstDayOfYear.weekday - 1;
  final firstMonday = firstDayOfYear.subtract(Duration(days: daysOffset));
  final weekNumber = ((date.difference(firstMonday).inDays) / 7).floor() + 1;
  return weekNumber;
}
```

---

### 6. Achievements (Достижения)

Ачивки и достижения пользователей.

**Поля:**
- `achievementId` — Int (PK, autoIncrement)
- `userId` — Int (FK to Users)
- `checklistId` — String? (FK to Checklists, опционально)
- `type` — Enum (streak5days, week100percent, team90percent, custom)
- `title` — String (название: "5 дней подряд!")
- `description` — String? (описание достижения)
- `iconName` — String (идентификатор иконки)
- `earnedAt` — DateTime (дата и время получения)
- `earnedDate` — DateTime (день получения без времени, для группировки)
- `weekNumber` — Int (номер недели получения)
- `weekYear` — Int (год получения)
- `metadata` — String? (JSON с дополнительными данными)

**Индексы:** `achievementId`, `userId`, `type`, `(weekNumber, weekYear)` composite

**Achievement types:**
- `streak5days` — 5 дней подряд выполнены все задачи
- `week100percent` — 100% выполнение за неделю
- `team90percent` — команда выполнила 90%+ задач за неделю
- `custom` — кастомное достижение

**Пример:**
```dart
Achievements(
  achievementId: "uuid-ach-1",
  userId: "uuid-anna",
  checklistId: "uuid-school-week",
  type: AchievementType.streak5days,
  title: "5 дней подряд!",
  description: "Анна выполнила все задачи 5 дней подряд",
  iconName: "fire",
  earnedAt: DateTime(2025, 10, 25, 20, 30),
  earnedDate: DateTime(2025, 10, 25),
  weekNumber: 43,
  weekYear: 2025,
)
```

---

### 7. Settings (Настройки приложения)

Глобальные настройки продукта (key-value хранилище).

**Поля:**
- `settingKey` — String (PK, название настройки)
- `settingValue` — String (значение)
- `modifiedAt` — DateTime

**Индексы:** `settingKey`

**Предустановленные настройки:**

| settingKey | settingValue | Описание |
|------------|--------------|----------|
| `week_start_day` | `"monday"` или `"sunday"` | Начало недели |
| `language` | `"ru"` или `"en"` | Язык приложения |
| `notification_morning_time` | `"07:30"` | Время утреннего напоминания |
| `notification_evening_time` | `"19:30"` | Время вечернего напоминания |
| `notification_enabled` | `"true"` или `"false"` | Включены ли уведомления |
| `onboarding_completed` | `"true"` или `"false"` | Пройден ли онбординг |
| `cloudkit_enabled` | `"true"` или `"false"` | Включена ли синхронизация |

**Пример использования:**
```dart
// Получить настройку
final weekStart = await isar.settings
  .filter()
  .settingKeyEqualTo('week_start_day')
  .findFirst();

// Сохранить настройку
await isar.writeTxn(() async {
  await isar.settings.put(Settings(
    settingKey: 'language',
    settingValue: 'ru',
    modifiedAt: DateTime.now(),
  ));
});
```

---

## Диаграмма связей

```
┌──────────────┐
│  Checklists  │
└──────┬───────┘
       │
       │ 1:N
       ▼
┌──────────────┐      ┌──────────────┐
│  UserTasks   │◄────►│    Users     │
└──────┬───────┘ N:1  └──────┬───────┘
       │                     │
       │ N:1                 │ 1:N
       ▼                     ▼
┌──────────────┐      ┌──────────────────┐
│    Tasks     │      │ TaskCompletions  │
└──────────────┘      └──────────────────┘
                              │
                              │ N:1
                              ▼
                     ┌──────────────────┐
                     │  Achievements    │
                     └──────────────────┘

┌──────────────┐
│  Settings    │ (глобальная таблица)
└──────────────┘
```

**Основные связи:**
- `Checklists (1) ──< UserTasks (N)` — один чеклист содержит много назначений задач
- `Users (1) ──< UserTasks (N)` — у одного пользователя много задач
- `Tasks (1) ──< UserTasks (N)` — одна задача может быть назначена разным людям
- `UserTasks → TaskCompletions` — связь через (userId, taskId)
- `Users (1) ──< Achievements (N)` — у пользователя много достижений

---

## Ключевые решения архитектуры

### 1. Foreign Keys вместо IsarLinks

Используем строковые foreign keys (`checklistId`, `personId`, `taskId`) вместо встроенных `IsarLinks`.

**Причины:**
- Проще кодогенерация (меньше ошибок с build_runner)
- Явные связи через индексированные поля
- Легче синхронизация с CloudKit (UUID передаются как строки)

### 2. Composite Primary Keys

В `UserTasks` и `TaskCompletion` используем составные ключи вместо отдельных ID.

**Преимущества:**
- Нет избыточных UUID
- Естественная уникальность (personId + taskId уникальны)
- Упрощение логики запросов

### 3. Week Number для периодов

Храним `weekNumber` (1-53) + `weekYear` для идентификации недель.

**Преимущества:**
- Быстрая группировка по неделям
- Легко фильтровать "все отметки за 10-ю неделю"
- Построение графиков прогресса по неделям
- Интернациональный стандарт ISO 8601

### 4. Денормализация в TaskCompletion

В `TaskCompletion` храним `checklistId`, хотя его можно получить через `UserTasks`.

**Причины:**
- Быстрые запросы без JOIN ("все отметки этого чеклиста за неделю")
- Isar — NoSQL БД, денормализация допустима
- Упрощение фильтрации

### 5. Settings как Key-Value

Глобальные настройки в отдельной таблице вместо hardcode.

**Преимущества:**
- Гибкость (можно менять настройки без апдейта кода)
- Синхронизация настроек между устройствами (через CloudKit)
- Простое добавление новых настроек

---

## Примеры запросов

### Получить все задачи для пользователя в чеклисте
```dart
final userTasks = await isar.userTasks
  .filter()
  .userIdEqualTo(userId)
  .checklistIdEqualTo(checklistId)
  .isEnabledEqualTo(true)
  .sortBySortOrder()
  .findAll();
```

### Получить все отметки за конкретную неделю
```dart
final completions = await isar.taskCompletions
  .filter()
  .weekNumberEqualTo(42)
  .weekYearEqualTo(2025)
  .checklistIdEqualTo(checklistId)
  .findAll();
```

### Получить процент выполнения за день
```dart
final dayCompletions = await isar.taskCompletions
  .filter()
  .weekNumberEqualTo(weekNumber)
  .weekYearEqualTo(weekYear)
  .dayOfWeekEqualTo(dayOfWeek)
  .checklistIdEqualTo(checklistId)
  .findAll();

final total = dayCompletions.length;
final completed = dayCompletions.where((c) => c.isCompleted).length;
final percentage = total > 0 ? (completed / total * 100) : 0;
```

### Проверить streak (дни подряд)
```dart
// Получить отметки за последние 7 дней для пользователя
final now = DateTime.now();
final sevenDaysAgo = now.subtract(Duration(days: 7));

final completions = await isar.taskCompletions
  .filter()
  .userIdEqualTo(userId)
  .completionDateBetween(sevenDaysAgo, now)
  .isCompletedEqualTo(true)
  .sortByCompletionDate()
  .findAll();

// Подсчет streak
int currentStreak = 0;
DateTime? lastDate;

for (var completion in completions.reversed) {
  if (lastDate == null ||
      completion.completionDate.difference(lastDate).inDays == 1) {
    currentStreak++;
    lastDate = completion.completionDate;
  } else {
    break;
  }
}
```

### Получить достижения пользователя за неделю
```dart
final achievements = await isar.achievements
  .filter()
  .userIdEqualTo(userId)
  .weekNumberEqualTo(weekNumber)
  .weekYearEqualTo(weekYear)
  .sortByEarnedAtDesc()
  .findAll();
```

---

## CloudKit Sync

Каждая таблица содержит поле `cloudKitRecordId` для синхронизации.

**Workflow:**
1. Локальное изменение → сохранение в Isar с `cloudKitRecordId = null`
2. Sync worker отправляет изменения в CloudKit
3. CloudKit возвращает recordId → обновляем `cloudKitRecordId`
4. При получении изменений с CloudKit обновляем локальные записи по `cloudKitRecordId`

**Conflict resolution:**
- "Последняя правка выигрывает" (Last Write Wins)
- Для TaskCompletion: "Выполненная задача выигрывает" (если один девайс пометил completed, другой не может убрать)

Подробнее: [feature-sync-architecture.md](./feature-sync-architecture.md)

---

## Migration Strategy

При изменении схемы БД:

1. **Isar Schema Version** — автоматически управляется Isar при изменении моделей
2. **Data Migration** — пишем миграционные скрипты в `lib/data/migrations/`
3. **CloudKit Schema** — изменения добавляются только additive (новые поля), удаление полей — через deprecated флаги

**Пример миграции:**
```dart
// lib/data/migrations/migration_v2.dart
Future<void> migrateToV2(Isar isar) async {
  // Добавить новое поле sortOrder во все существующие Person
  await isar.writeTxn(() async {
    final persons = await isar.persons.where().findAll();
    for (var i = 0; i < persons.length; i++) {
      persons[i].sortOrder = i;
      await isar.persons.put(persons[i]);
    }
  });
}
```

---

## Performance Considerations

### Индексы
- Все primary keys индексированы автоматически
- Composite индексы на `(weekNumber, weekYear)` для быстрой фильтрации по неделям
- Индексы на foreign keys (`checklistId`, `personId`, `taskId`)

### Размер данных
- **1 чеклист** ≈ 200 bytes
- **1 задача** ≈ 150 bytes
- **1 отметка** ≈ 100 bytes
- **Неделя с 3 людьми × 5 задач × 7 дней** = 105 отметок ≈ 10.5 KB
- **Год использования** ≈ 52 недели ≈ 546 KB

Даже при активном использовании БД остается компактной (<10 MB).

### Оптимизация запросов
- Используем `.filter()` вместо `.where()` для сложных условий
- Lazy loading для списков (не загружаем все отметки сразу)
- Pagination для истории (по 4 недели за раз)

---

## Next Steps

- [ ] Создать Isar модели в `app/lib/data/models/`
- [ ] Сгенерировать схемы через `build_runner`
- [ ] Создать репозитории для каждой таблицы
- [ ] Написать тесты для базовых CRUD операций
- [ ] Реализовать миграции
- [ ] Настроить CloudKit схему
